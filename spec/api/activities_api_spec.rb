=begin
#Strava API v3

#The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for StravaClient::ActivitiesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ActivitiesApi' do
  before do
    # run before each test
    @instance = StravaClient::ActivitiesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ActivitiesApi' do
    it 'should create an instance of ActivitiesApi' do
      expect(@instance).to be_instance_of(StravaClient::ActivitiesApi)
    end
  end

  # unit tests for create_activity
  # Create an Activity
  # Creates a manual activity for an athlete, requires activity:write scope.
  # @param name The name of the activity.
  # @param type Type of activity. For example - Run, Ride etc.
  # @param start_date_local ISO 8601 formatted date time.
  # @param elapsed_time In seconds.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description Description of the activity.
  # @option opts [Float] :distance In meters.
  # @option opts [Integer] :trainer Set to 1 to mark as a trainer activity.
  # @option opts [Integer] :commute Set to 1 to mark as commute.
  # @return [DetailedActivity]
  describe 'create_activity test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_activity_by_id
  # Get Activity
  # Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
  # @param id The identifier of the activity.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :include_all_efforts To include all segments efforts.
  # @return [DetailedActivity]
  describe 'get_activity_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_comments_by_activity_id
  # List Activity Comments
  # Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
  # @param id The identifier of the activity.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number. Defaults to 1.
  # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
  # @return [Array<Comment>]
  describe 'get_comments_by_activity_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_kudoers_by_activity_id
  # List Activity Kudoers
  # Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
  # @param id The identifier of the activity.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number. Defaults to 1.
  # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
  # @return [Array<SummaryAthlete>]
  describe 'get_kudoers_by_activity_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_laps_by_activity_id
  # List Activity Laps
  # Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
  # @param id The identifier of the activity.
  # @param [Hash] opts the optional parameters
  # @return [Array<Lap>]
  describe 'get_laps_by_activity_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_logged_in_athlete_activities
  # List Athlete Activities
  # Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :before An epoch timestamp to use for filtering activities that have taken place before a certain time.
  # @option opts [Integer] :after An epoch timestamp to use for filtering activities that have taken place after a certain time.
  # @option opts [Integer] :page Page number. Defaults to 1.
  # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
  # @return [Array<SummaryActivity>]
  describe 'get_logged_in_athlete_activities test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_zones_by_activity_id
  # Get Activity Zones
  # Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
  # @param id The identifier of the activity.
  # @param [Hash] opts the optional parameters
  # @return [Array<ActivityZone>]
  describe 'get_zones_by_activity_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_activity_by_id
  # Update Activity
  # Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
  # @param id The identifier of the activity.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdatableActivity] :body 
  # @return [DetailedActivity]
  describe 'update_activity_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
