=begin
#Strava API v3

#Strava API

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module StravaClient

  class Route
    attr_accessor :athlete

    # The description of the route
    attr_accessor :description

    # The route's distance, in meters
    attr_accessor :distance

    # The route's elevation gain.
    attr_accessor :elevation_gain

    # The unique identifier of this route
    attr_accessor :id

    attr_accessor :map

    # The name of this route
    attr_accessor :name

    # Whether this route is private
    attr_accessor :private

    # Whether this route is starred by the logged-in athlete
    attr_accessor :starred

    attr_accessor :timestamp

    # This route's type (1 for ride, 2 for runs)
    attr_accessor :type

    # This route's sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)
    attr_accessor :sub_type

    # The segments traversed by this route
    attr_accessor :segments

    # The directions of this route
    attr_accessor :directions


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'athlete' => :'athlete',
        :'description' => :'description',
        :'distance' => :'distance',
        :'elevation_gain' => :'elevation_gain',
        :'id' => :'id',
        :'map' => :'map',
        :'name' => :'name',
        :'private' => :'private',
        :'starred' => :'starred',
        :'timestamp' => :'timestamp',
        :'type' => :'type',
        :'sub_type' => :'sub_type',
        :'segments' => :'segments',
        :'directions' => :'directions'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'athlete' => :'SummaryAthlete',
        :'description' => :'String',
        :'distance' => :'Float',
        :'elevation_gain' => :'Float',
        :'id' => :'Integer',
        :'map' => :'PolylineMap',
        :'name' => :'String',
        :'private' => :'BOOLEAN',
        :'starred' => :'BOOLEAN',
        :'timestamp' => :'Integer',
        :'type' => :'Integer',
        :'sub_type' => :'Integer',
        :'segments' => :'Array<SummarySegment>',
        :'directions' => :'Array<RouteDirection>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'athlete')
        self.athlete = attributes[:'athlete']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'distance')
        self.distance = attributes[:'distance']
      end

      if attributes.has_key?(:'elevation_gain')
        self.elevation_gain = attributes[:'elevation_gain']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'map')
        self.map = attributes[:'map']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'private')
        self.private = attributes[:'private']
      end

      if attributes.has_key?(:'starred')
        self.starred = attributes[:'starred']
      end

      if attributes.has_key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'sub_type')
        self.sub_type = attributes[:'sub_type']
      end

      if attributes.has_key?(:'segments')
        if (value = attributes[:'segments']).is_a?(Array)
          self.segments = value
        end
      end

      if attributes.has_key?(:'directions')
        if (value = attributes[:'directions']).is_a?(Array)
          self.directions = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          athlete == o.athlete &&
          description == o.description &&
          distance == o.distance &&
          elevation_gain == o.elevation_gain &&
          id == o.id &&
          map == o.map &&
          name == o.name &&
          private == o.private &&
          starred == o.starred &&
          timestamp == o.timestamp &&
          type == o.type &&
          sub_type == o.sub_type &&
          segments == o.segments &&
          directions == o.directions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [athlete, description, distance, elevation_gain, id, map, name, private, starred, timestamp, type, sub_type, segments, directions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = StravaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
