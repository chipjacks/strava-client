=begin
#Strava API v3

#The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module StravaClient

  class DetailedSegmentEffort
    # The unique identifier of this effort
    attr_accessor :id

    # The unique identifier of the activity related to this effort
    attr_accessor :activity_id

    # The effort's elapsed time
    attr_accessor :elapsed_time

    # The time at which the effort was started.
    attr_accessor :start_date

    # The time at which the effort was started in the local timezone.
    attr_accessor :start_date_local

    # The effort's distance in meters
    attr_accessor :distance

    # Whether this effort is the current best on the leaderboard
    attr_accessor :is_kom

    # The name of the segment on which this effort was performed
    attr_accessor :name

    attr_accessor :activity

    attr_accessor :athlete

    # The effort's moving time
    attr_accessor :moving_time

    # The start index of this effort in its activity's stream
    attr_accessor :start_index

    # The end index of this effort in its activity's stream
    attr_accessor :end_index

    # The effort's average cadence
    attr_accessor :average_cadence

    # The average wattage of this effort
    attr_accessor :average_watts

    # For riding efforts, whether the wattage was reported by a dedicated recording device
    attr_accessor :device_watts

    # The heart heart rate of the athlete during this effort
    attr_accessor :average_heartrate

    # The maximum heart rate of the athlete during this effort
    attr_accessor :max_heartrate

    attr_accessor :segment

    # The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
    attr_accessor :kom_rank

    # The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload
    attr_accessor :pr_rank

    # Whether this effort should be hidden when viewed within an activity
    attr_accessor :hidden


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'activity_id' => :'activity_id',
        :'elapsed_time' => :'elapsed_time',
        :'start_date' => :'start_date',
        :'start_date_local' => :'start_date_local',
        :'distance' => :'distance',
        :'is_kom' => :'is_kom',
        :'name' => :'name',
        :'activity' => :'activity',
        :'athlete' => :'athlete',
        :'moving_time' => :'moving_time',
        :'start_index' => :'start_index',
        :'end_index' => :'end_index',
        :'average_cadence' => :'average_cadence',
        :'average_watts' => :'average_watts',
        :'device_watts' => :'device_watts',
        :'average_heartrate' => :'average_heartrate',
        :'max_heartrate' => :'max_heartrate',
        :'segment' => :'segment',
        :'kom_rank' => :'kom_rank',
        :'pr_rank' => :'pr_rank',
        :'hidden' => :'hidden'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'activity_id' => :'Integer',
        :'elapsed_time' => :'Integer',
        :'start_date' => :'DateTime',
        :'start_date_local' => :'DateTime',
        :'distance' => :'Float',
        :'is_kom' => :'BOOLEAN',
        :'name' => :'String',
        :'activity' => :'MetaActivity',
        :'athlete' => :'MetaAthlete',
        :'moving_time' => :'Integer',
        :'start_index' => :'Integer',
        :'end_index' => :'Integer',
        :'average_cadence' => :'Float',
        :'average_watts' => :'Float',
        :'device_watts' => :'BOOLEAN',
        :'average_heartrate' => :'Float',
        :'max_heartrate' => :'Float',
        :'segment' => :'SummarySegment',
        :'kom_rank' => :'Integer',
        :'pr_rank' => :'Integer',
        :'hidden' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'activity_id')
        self.activity_id = attributes[:'activity_id']
      end

      if attributes.has_key?(:'elapsed_time')
        self.elapsed_time = attributes[:'elapsed_time']
      end

      if attributes.has_key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.has_key?(:'start_date_local')
        self.start_date_local = attributes[:'start_date_local']
      end

      if attributes.has_key?(:'distance')
        self.distance = attributes[:'distance']
      end

      if attributes.has_key?(:'is_kom')
        self.is_kom = attributes[:'is_kom']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'activity')
        self.activity = attributes[:'activity']
      end

      if attributes.has_key?(:'athlete')
        self.athlete = attributes[:'athlete']
      end

      if attributes.has_key?(:'moving_time')
        self.moving_time = attributes[:'moving_time']
      end

      if attributes.has_key?(:'start_index')
        self.start_index = attributes[:'start_index']
      end

      if attributes.has_key?(:'end_index')
        self.end_index = attributes[:'end_index']
      end

      if attributes.has_key?(:'average_cadence')
        self.average_cadence = attributes[:'average_cadence']
      end

      if attributes.has_key?(:'average_watts')
        self.average_watts = attributes[:'average_watts']
      end

      if attributes.has_key?(:'device_watts')
        self.device_watts = attributes[:'device_watts']
      end

      if attributes.has_key?(:'average_heartrate')
        self.average_heartrate = attributes[:'average_heartrate']
      end

      if attributes.has_key?(:'max_heartrate')
        self.max_heartrate = attributes[:'max_heartrate']
      end

      if attributes.has_key?(:'segment')
        self.segment = attributes[:'segment']
      end

      if attributes.has_key?(:'kom_rank')
        self.kom_rank = attributes[:'kom_rank']
      end

      if attributes.has_key?(:'pr_rank')
        self.pr_rank = attributes[:'pr_rank']
      end

      if attributes.has_key?(:'hidden')
        self.hidden = attributes[:'hidden']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@kom_rank.nil? && @kom_rank > 10
        invalid_properties.push("invalid value for 'kom_rank', must be smaller than or equal to 10.")
      end

      if !@kom_rank.nil? && @kom_rank < 1
        invalid_properties.push("invalid value for 'kom_rank', must be greater than or equal to 1.")
      end

      if !@pr_rank.nil? && @pr_rank > 3
        invalid_properties.push("invalid value for 'pr_rank', must be smaller than or equal to 3.")
      end

      if !@pr_rank.nil? && @pr_rank < 1
        invalid_properties.push("invalid value for 'pr_rank', must be greater than or equal to 1.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@kom_rank.nil? && @kom_rank > 10
      return false if !@kom_rank.nil? && @kom_rank < 1
      return false if !@pr_rank.nil? && @pr_rank > 3
      return false if !@pr_rank.nil? && @pr_rank < 1
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] kom_rank Value to be assigned
    def kom_rank=(kom_rank)

      if !kom_rank.nil? && kom_rank > 10
        fail ArgumentError, "invalid value for 'kom_rank', must be smaller than or equal to 10."
      end

      if !kom_rank.nil? && kom_rank < 1
        fail ArgumentError, "invalid value for 'kom_rank', must be greater than or equal to 1."
      end

      @kom_rank = kom_rank
    end

    # Custom attribute writer method with validation
    # @param [Object] pr_rank Value to be assigned
    def pr_rank=(pr_rank)

      if !pr_rank.nil? && pr_rank > 3
        fail ArgumentError, "invalid value for 'pr_rank', must be smaller than or equal to 3."
      end

      if !pr_rank.nil? && pr_rank < 1
        fail ArgumentError, "invalid value for 'pr_rank', must be greater than or equal to 1."
      end

      @pr_rank = pr_rank
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          activity_id == o.activity_id &&
          elapsed_time == o.elapsed_time &&
          start_date == o.start_date &&
          start_date_local == o.start_date_local &&
          distance == o.distance &&
          is_kom == o.is_kom &&
          name == o.name &&
          activity == o.activity &&
          athlete == o.athlete &&
          moving_time == o.moving_time &&
          start_index == o.start_index &&
          end_index == o.end_index &&
          average_cadence == o.average_cadence &&
          average_watts == o.average_watts &&
          device_watts == o.device_watts &&
          average_heartrate == o.average_heartrate &&
          max_heartrate == o.max_heartrate &&
          segment == o.segment &&
          kom_rank == o.kom_rank &&
          pr_rank == o.pr_rank &&
          hidden == o.hidden
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, activity_id, elapsed_time, start_date, start_date_local, distance, is_kom, name, activity, athlete, moving_time, start_index, end_index, average_cadence, average_watts, device_watts, average_heartrate, max_heartrate, segment, kom_rank, pr_rank, hidden].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = StravaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
