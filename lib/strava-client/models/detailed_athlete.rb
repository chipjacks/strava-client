=begin
#Strava API v3

#Strava API

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module StravaClient

  class DetailedAthlete
    # The unique identifier of the athlete
    attr_accessor :id

    # Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
    attr_accessor :resource_state

    # The athlete's first name.
    attr_accessor :firstname

    # The athlete's last name.
    attr_accessor :lastname

    # URL to a 62x62 pixel profile picture.
    attr_accessor :profile_medium

    # URL to a 124x124 pixel profile picture.
    attr_accessor :profile

    # The athlete's city.
    attr_accessor :city

    # The athlete's state or geographical region.
    attr_accessor :state

    # The athlete's country.
    attr_accessor :country

    # The athlete's sex.
    attr_accessor :sex

    # Whether the currently logged-in athlete follows this athlete.
    attr_accessor :friend

    # Whether this athlete follows the currently logged-in athlete.
    attr_accessor :follower

    # The athlete's premium status.
    attr_accessor :premium

    # The time at which the athlete was created.
    attr_accessor :created_at

    # The time at which the athlete was last updated.
    attr_accessor :updated_at

    # The athlete's follower count.
    attr_accessor :follower_count

    # The athlete's friend count.
    attr_accessor :friend_count

    # The number or athletes mutually followed by this athlete and the currently logged-in athlete.
    attr_accessor :mutual_friend_count

    # The athlete's preferred unit system.
    attr_accessor :measurement_preference

    # The athlete's email address.
    attr_accessor :email

    # The athlete's FTP (Functional Threshold Power).
    attr_accessor :ftp

    # The athlete's weight.
    attr_accessor :weight

    # The athlete's clubs.
    attr_accessor :clubs

    # The athlete's bikes.
    attr_accessor :bikes

    # The athlete's shoes.
    attr_accessor :shoes

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'resource_state' => :'resource_state',
        :'firstname' => :'firstname',
        :'lastname' => :'lastname',
        :'profile_medium' => :'profile_medium',
        :'profile' => :'profile',
        :'city' => :'city',
        :'state' => :'state',
        :'country' => :'country',
        :'sex' => :'sex',
        :'friend' => :'friend',
        :'follower' => :'follower',
        :'premium' => :'premium',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'follower_count' => :'follower_count',
        :'friend_count' => :'friend_count',
        :'mutual_friend_count' => :'mutual_friend_count',
        :'measurement_preference' => :'measurement_preference',
        :'email' => :'email',
        :'ftp' => :'ftp',
        :'weight' => :'weight',
        :'clubs' => :'clubs',
        :'bikes' => :'bikes',
        :'shoes' => :'shoes'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'resource_state' => :'Integer',
        :'firstname' => :'String',
        :'lastname' => :'String',
        :'profile_medium' => :'String',
        :'profile' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'country' => :'String',
        :'sex' => :'String',
        :'friend' => :'String',
        :'follower' => :'String',
        :'premium' => :'BOOLEAN',
        :'created_at' => :'DateTime',
        :'updated_at' => :'DateTime',
        :'follower_count' => :'Integer',
        :'friend_count' => :'Integer',
        :'mutual_friend_count' => :'Integer',
        :'measurement_preference' => :'String',
        :'email' => :'String',
        :'ftp' => :'Integer',
        :'weight' => :'Float',
        :'clubs' => :'Array<SummaryClub>',
        :'bikes' => :'Array<SummaryGear>',
        :'shoes' => :'Array<SummaryGear>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'resource_state')
        self.resource_state = attributes[:'resource_state']
      end

      if attributes.has_key?(:'firstname')
        self.firstname = attributes[:'firstname']
      end

      if attributes.has_key?(:'lastname')
        self.lastname = attributes[:'lastname']
      end

      if attributes.has_key?(:'profile_medium')
        self.profile_medium = attributes[:'profile_medium']
      end

      if attributes.has_key?(:'profile')
        self.profile = attributes[:'profile']
      end

      if attributes.has_key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'sex')
        self.sex = attributes[:'sex']
      end

      if attributes.has_key?(:'friend')
        self.friend = attributes[:'friend']
      end

      if attributes.has_key?(:'follower')
        self.follower = attributes[:'follower']
      end

      if attributes.has_key?(:'premium')
        self.premium = attributes[:'premium']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'follower_count')
        self.follower_count = attributes[:'follower_count']
      end

      if attributes.has_key?(:'friend_count')
        self.friend_count = attributes[:'friend_count']
      end

      if attributes.has_key?(:'mutual_friend_count')
        self.mutual_friend_count = attributes[:'mutual_friend_count']
      end

      if attributes.has_key?(:'measurement_preference')
        self.measurement_preference = attributes[:'measurement_preference']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'ftp')
        self.ftp = attributes[:'ftp']
      end

      if attributes.has_key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.has_key?(:'clubs')
        if (value = attributes[:'clubs']).is_a?(Array)
          self.clubs = value
        end
      end

      if attributes.has_key?(:'bikes')
        if (value = attributes[:'bikes']).is_a?(Array)
          self.bikes = value
        end
      end

      if attributes.has_key?(:'shoes')
        if (value = attributes[:'shoes']).is_a?(Array)
          self.shoes = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      sex_validator = EnumAttributeValidator.new('String', ["M", "F"])
      return false unless sex_validator.valid?(@sex)
      friend_validator = EnumAttributeValidator.new('String', ["pending", "accepted", "blocked"])
      return false unless friend_validator.valid?(@friend)
      follower_validator = EnumAttributeValidator.new('String', ["pending", "accepted", "blocked"])
      return false unless follower_validator.valid?(@follower)
      measurement_preference_validator = EnumAttributeValidator.new('String', ["feet", "meters"])
      return false unless measurement_preference_validator.valid?(@measurement_preference)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sex Object to be assigned
    def sex=(sex)
      validator = EnumAttributeValidator.new('String', ["M", "F"])
      unless validator.valid?(sex)
        fail ArgumentError, "invalid value for 'sex', must be one of #{validator.allowable_values}."
      end
      @sex = sex
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] friend Object to be assigned
    def friend=(friend)
      validator = EnumAttributeValidator.new('String', ["pending", "accepted", "blocked"])
      unless validator.valid?(friend)
        fail ArgumentError, "invalid value for 'friend', must be one of #{validator.allowable_values}."
      end
      @friend = friend
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] follower Object to be assigned
    def follower=(follower)
      validator = EnumAttributeValidator.new('String', ["pending", "accepted", "blocked"])
      unless validator.valid?(follower)
        fail ArgumentError, "invalid value for 'follower', must be one of #{validator.allowable_values}."
      end
      @follower = follower
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] measurement_preference Object to be assigned
    def measurement_preference=(measurement_preference)
      validator = EnumAttributeValidator.new('String', ["feet", "meters"])
      unless validator.valid?(measurement_preference)
        fail ArgumentError, "invalid value for 'measurement_preference', must be one of #{validator.allowable_values}."
      end
      @measurement_preference = measurement_preference
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          resource_state == o.resource_state &&
          firstname == o.firstname &&
          lastname == o.lastname &&
          profile_medium == o.profile_medium &&
          profile == o.profile &&
          city == o.city &&
          state == o.state &&
          country == o.country &&
          sex == o.sex &&
          friend == o.friend &&
          follower == o.follower &&
          premium == o.premium &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          follower_count == o.follower_count &&
          friend_count == o.friend_count &&
          mutual_friend_count == o.mutual_friend_count &&
          measurement_preference == o.measurement_preference &&
          email == o.email &&
          ftp == o.ftp &&
          weight == o.weight &&
          clubs == o.clubs &&
          bikes == o.bikes &&
          shoes == o.shoes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, resource_state, firstname, lastname, profile_medium, profile, city, state, country, sex, friend, follower, premium, created_at, updated_at, follower_count, friend_count, mutual_friend_count, measurement_preference, email, ftp, weight, clubs, bikes, shoes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = StravaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
