=begin
#Strava API v3

#The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module StravaClient

  class DetailedClub
    # The club's unique identifier.
    attr_accessor :id

    # Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
    attr_accessor :resource_state

    # The club's name.
    attr_accessor :name

    # URL to a 60x60 pixel profile picture.
    attr_accessor :profile_medium

    # URL to a ~1185x580 pixel cover photo.
    attr_accessor :cover_photo

    # URL to a ~360x176  pixel cover photo.
    attr_accessor :cover_photo_small

    attr_accessor :sport_type

    # The club's city.
    attr_accessor :city

    # The club's state or geographical region.
    attr_accessor :state

    # The club's country.
    attr_accessor :country

    # Whether the club is private.
    attr_accessor :private

    # The club's member count.
    attr_accessor :member_count

    # Whether the club is featured or not.
    attr_accessor :featured

    # Whether the club is verified or not.
    attr_accessor :verified

    # The club's vanity URL.
    attr_accessor :url

    # The membership status of the logged-in athlete.
    attr_accessor :membership

    # Whether the currently logged-in athlete is an administrator of this club.
    attr_accessor :admin

    # Whether the currently logged-in athlete is the owner of this club.
    attr_accessor :owner

    # The number of athletes in the club that the logged-in athlete follows.
    attr_accessor :following_count

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'resource_state' => :'resource_state',
        :'name' => :'name',
        :'profile_medium' => :'profile_medium',
        :'cover_photo' => :'cover_photo',
        :'cover_photo_small' => :'cover_photo_small',
        :'sport_type' => :'sport_type',
        :'city' => :'city',
        :'state' => :'state',
        :'country' => :'country',
        :'private' => :'private',
        :'member_count' => :'member_count',
        :'featured' => :'featured',
        :'verified' => :'verified',
        :'url' => :'url',
        :'membership' => :'membership',
        :'admin' => :'admin',
        :'owner' => :'owner',
        :'following_count' => :'following_count'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'resource_state' => :'Integer',
        :'name' => :'String',
        :'profile_medium' => :'String',
        :'cover_photo' => :'String',
        :'cover_photo_small' => :'String',
        :'sport_type' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'country' => :'String',
        :'private' => :'BOOLEAN',
        :'member_count' => :'Integer',
        :'featured' => :'BOOLEAN',
        :'verified' => :'BOOLEAN',
        :'url' => :'String',
        :'membership' => :'String',
        :'admin' => :'BOOLEAN',
        :'owner' => :'BOOLEAN',
        :'following_count' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'resource_state')
        self.resource_state = attributes[:'resource_state']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'profile_medium')
        self.profile_medium = attributes[:'profile_medium']
      end

      if attributes.has_key?(:'cover_photo')
        self.cover_photo = attributes[:'cover_photo']
      end

      if attributes.has_key?(:'cover_photo_small')
        self.cover_photo_small = attributes[:'cover_photo_small']
      end

      if attributes.has_key?(:'sport_type')
        self.sport_type = attributes[:'sport_type']
      end

      if attributes.has_key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'private')
        self.private = attributes[:'private']
      end

      if attributes.has_key?(:'member_count')
        self.member_count = attributes[:'member_count']
      end

      if attributes.has_key?(:'featured')
        self.featured = attributes[:'featured']
      end

      if attributes.has_key?(:'verified')
        self.verified = attributes[:'verified']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'membership')
        self.membership = attributes[:'membership']
      end

      if attributes.has_key?(:'admin')
        self.admin = attributes[:'admin']
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.has_key?(:'following_count')
        self.following_count = attributes[:'following_count']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      sport_type_validator = EnumAttributeValidator.new('String', ["cycling", "running", "triathlon", "other"])
      return false unless sport_type_validator.valid?(@sport_type)
      membership_validator = EnumAttributeValidator.new('String', ["member", "pending"])
      return false unless membership_validator.valid?(@membership)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sport_type Object to be assigned
    def sport_type=(sport_type)
      validator = EnumAttributeValidator.new('String', ["cycling", "running", "triathlon", "other"])
      unless validator.valid?(sport_type)
        fail ArgumentError, "invalid value for 'sport_type', must be one of #{validator.allowable_values}."
      end
      @sport_type = sport_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] membership Object to be assigned
    def membership=(membership)
      validator = EnumAttributeValidator.new('String', ["member", "pending"])
      unless validator.valid?(membership)
        fail ArgumentError, "invalid value for 'membership', must be one of #{validator.allowable_values}."
      end
      @membership = membership
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          resource_state == o.resource_state &&
          name == o.name &&
          profile_medium == o.profile_medium &&
          cover_photo == o.cover_photo &&
          cover_photo_small == o.cover_photo_small &&
          sport_type == o.sport_type &&
          city == o.city &&
          state == o.state &&
          country == o.country &&
          private == o.private &&
          member_count == o.member_count &&
          featured == o.featured &&
          verified == o.verified &&
          url == o.url &&
          membership == o.membership &&
          admin == o.admin &&
          owner == o.owner &&
          following_count == o.following_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, resource_state, name, profile_medium, cover_photo, cover_photo_small, sport_type, city, state, country, private, member_count, featured, verified, url, membership, admin, owner, following_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = StravaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
