=begin
#Strava API v3

#The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module StravaClient
  class SegmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Explore segments
    # Returns the top 10 segments matching a specified query.
    # @param bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :activity_type Desired activity type.
    # @option opts [Integer] :min_cat The minimum climbing category.
    # @option opts [Integer] :max_cat The maximum climbing category.
    # @return [ExplorerResponse]
    def explore_segments(bounds, opts = {})
      data, _status_code, _headers = explore_segments_with_http_info(bounds, opts)
      return data
    end

    # Explore segments
    # Returns the top 10 segments matching a specified query.
    # @param bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :activity_type Desired activity type.
    # @option opts [Integer] :min_cat The minimum climbing category.
    # @option opts [Integer] :max_cat The maximum climbing category.
    # @return [Array<(ExplorerResponse, Fixnum, Hash)>] ExplorerResponse data, response status code and response headers
    def explore_segments_with_http_info(bounds, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.explore_segments ..."
      end
      # verify the required parameter 'bounds' is set
      if @api_client.config.client_side_validation && bounds.nil?
        fail ArgumentError, "Missing the required parameter 'bounds' when calling SegmentsApi.explore_segments"
      end
      if @api_client.config.client_side_validation && bounds.length > 4
        fail ArgumentError, 'invalid value for "bounds" when calling SegmentsApi.explore_segments, number of items must be less than or equal to 4.'
      end

      if @api_client.config.client_side_validation && bounds.length < 4
        fail ArgumentError, 'invalid value for "bounds" when calling SegmentsApi.explore_segments, number of items must be greater than or equal to 4.'
      end

      if @api_client.config.client_side_validation && opts[:'activity_type'] && !['running', 'riding'].include?(opts[:'activity_type'])
        fail ArgumentError, 'invalid value for "activity_type", must be one of running, riding'
      end
      if @api_client.config.client_side_validation && !opts[:'min_cat'].nil? && opts[:'min_cat'] > 5
        fail ArgumentError, 'invalid value for "opts[:"min_cat"]" when calling SegmentsApi.explore_segments, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_cat'].nil? && opts[:'min_cat'] < 0
        fail ArgumentError, 'invalid value for "opts[:"min_cat"]" when calling SegmentsApi.explore_segments, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_cat'].nil? && opts[:'max_cat'] > 5
        fail ArgumentError, 'invalid value for "opts[:"max_cat"]" when calling SegmentsApi.explore_segments, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_cat'].nil? && opts[:'max_cat'] < 0
        fail ArgumentError, 'invalid value for "opts[:"max_cat"]" when calling SegmentsApi.explore_segments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/segments/explore"

      # query parameters
      query_params = {}
      query_params[:'bounds'] = @api_client.build_collection_param(bounds, :csv)
      query_params[:'activity_type'] = opts[:'activity_type'] if !opts[:'activity_type'].nil?
      query_params[:'min_cat'] = opts[:'min_cat'] if !opts[:'min_cat'].nil?
      query_params[:'max_cat'] = opts[:'max_cat'] if !opts[:'max_cat'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExplorerResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#explore_segments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Starred Segments
    # List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Defaults to 1.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [Array<SummarySegment>]
    def get_logged_in_athlete_starred_segments(opts = {})
      data, _status_code, _headers = get_logged_in_athlete_starred_segments_with_http_info(opts)
      return data
    end

    # List Starred Segments
    # List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. Defaults to 1.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(Array<SummarySegment>, Fixnum, Hash)>] Array<SummarySegment> data, response status code and response headers
    def get_logged_in_athlete_starred_segments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.get_logged_in_athlete_starred_segments ..."
      end
      # resource path
      local_var_path = "/segments/starred"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SummarySegment>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#get_logged_in_athlete_starred_segments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Segment
    # Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
    # @param id The identifier of the segment.
    # @param [Hash] opts the optional parameters
    # @return [DetailedSegment]
    def get_segment_by_id(id, opts = {})
      data, _status_code, _headers = get_segment_by_id_with_http_info(id, opts)
      return data
    end

    # Get Segment
    # Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
    # @param id The identifier of the segment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetailedSegment, Fixnum, Hash)>] DetailedSegment data, response status code and response headers
    def get_segment_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.get_segment_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SegmentsApi.get_segment_by_id"
      end
      # resource path
      local_var_path = "/segments/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetailedSegment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#get_segment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Star Segment
    # Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
    # @param id The identifier of the segment to star.
    # @param starred If true, star the segment; if false, unstar the segment.
    # @param [Hash] opts the optional parameters
    # @return [DetailedSegment]
    def star_segment(id, starred, opts = {})
      data, _status_code, _headers = star_segment_with_http_info(id, starred, opts)
      return data
    end

    # Star Segment
    # Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
    # @param id The identifier of the segment to star.
    # @param starred If true, star the segment; if false, unstar the segment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetailedSegment, Fixnum, Hash)>] DetailedSegment data, response status code and response headers
    def star_segment_with_http_info(id, starred, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.star_segment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SegmentsApi.star_segment"
      end
      # verify the required parameter 'starred' is set
      if @api_client.config.client_side_validation && starred.nil?
        fail ArgumentError, "Missing the required parameter 'starred' when calling SegmentsApi.star_segment"
      end
      # resource path
      local_var_path = "/segments/{id}/starred".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}
      form_params["starred"] = starred

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetailedSegment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#star_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
