=begin
#Strava API v3

#Strava API

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module StravaClient
  class SegmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Explore segments
    # Returns the segments matching a specified query.
    # @param bounds The geographical boundaries of the search.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :activity_type Desired activity type.
    # @option opts [Integer] :min_cat The minimum climbing category.
    # @option opts [Integer] :max_cat The maximum climbing category.
    # @return [ExplorerResponse]
    def explore_segments(bounds, opts = {})
      data, _status_code, _headers = explore_segments_with_http_info(bounds, opts)
      return data
    end

    # Explore segments
    # Returns the segments matching a specified query.
    # @param bounds The geographical boundaries of the search.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :activity_type Desired activity type.
    # @option opts [Integer] :min_cat The minimum climbing category.
    # @option opts [Integer] :max_cat The maximum climbing category.
    # @return [Array<(ExplorerResponse, Fixnum, Hash)>] ExplorerResponse data, response status code and response headers
    def explore_segments_with_http_info(bounds, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.explore_segments ..."
      end
      # verify the required parameter 'bounds' is set
      if @api_client.config.client_side_validation && bounds.nil?
        fail ArgumentError, "Missing the required parameter 'bounds' when calling SegmentsApi.explore_segments"
      end
      if @api_client.config.client_side_validation && bounds.length > 4
        fail ArgumentError, 'invalid value for "bounds" when calling SegmentsApi.explore_segments, number of items must be less than or equal to 4.'
      end

      if @api_client.config.client_side_validation && bounds.length < 4
        fail ArgumentError, 'invalid value for "bounds" when calling SegmentsApi.explore_segments, number of items must be greater than or equal to 4.'
      end

      if @api_client.config.client_side_validation && opts[:'activity_type'] && !['running', 'riding'].include?(opts[:'activity_type'])
        fail ArgumentError, 'invalid value for "activity_type", must be one of running, riding'
      end
      if @api_client.config.client_side_validation && !opts[:'min_cat'].nil? && opts[:'min_cat'] > 5
        fail ArgumentError, 'invalid value for "opts[:"min_cat"]" when calling SegmentsApi.explore_segments, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_cat'].nil? && opts[:'min_cat'] < 0
        fail ArgumentError, 'invalid value for "opts[:"min_cat"]" when calling SegmentsApi.explore_segments, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_cat'].nil? && opts[:'max_cat'] > 5
        fail ArgumentError, 'invalid value for "opts[:"max_cat"]" when calling SegmentsApi.explore_segments, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_cat'].nil? && opts[:'max_cat'] < 0
        fail ArgumentError, 'invalid value for "opts[:"max_cat"]" when calling SegmentsApi.explore_segments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/segments/explore"

      # query parameters
      query_params = {}
      query_params[:'bounds'] = @api_client.build_collection_param(bounds, :csv)
      query_params[:'activity_type'] = opts[:'activity_type'] if !opts[:'activity_type'].nil?
      query_params[:'min_cat'] = opts[:'min_cat'] if !opts[:'min_cat'].nil?
      query_params[:'max_cat'] = opts[:'max_cat'] if !opts[:'max_cat'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExplorerResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#explore_segments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Segment Leaderboard
    # Returns the specified segment leaderboard.
    # @param id The identifier of the segment leaderboard.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :gender Filter by gender.
    # @option opts [String] :age_group Premium Feature. Filter by age group.
    # @option opts [String] :weight_class Premium Feature. Filter by weight class.
    # @option opts [BOOLEAN] :following Filter by friends of the authenticated athlete.
    # @option opts [Integer] :club_id Filter by club.
    # @option opts [String] :date_range Filter by date range.
    # @option opts [Integer] :context_entries 
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [SegmentLeaderboard]
    def get_leaderboard_by_segment_id(id, opts = {})
      data, _status_code, _headers = get_leaderboard_by_segment_id_with_http_info(id, opts)
      return data
    end

    # Get Segment Leaderboard
    # Returns the specified segment leaderboard.
    # @param id The identifier of the segment leaderboard.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :gender Filter by gender.
    # @option opts [String] :age_group Premium Feature. Filter by age group.
    # @option opts [String] :weight_class Premium Feature. Filter by weight class.
    # @option opts [BOOLEAN] :following Filter by friends of the authenticated athlete.
    # @option opts [Integer] :club_id Filter by club.
    # @option opts [String] :date_range Filter by date range.
    # @option opts [Integer] :context_entries 
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(SegmentLeaderboard, Fixnum, Hash)>] SegmentLeaderboard data, response status code and response headers
    def get_leaderboard_by_segment_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.get_leaderboard_by_segment_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SegmentsApi.get_leaderboard_by_segment_id"
      end
      if @api_client.config.client_side_validation && opts[:'gender'] && !['M', 'F'].include?(opts[:'gender'])
        fail ArgumentError, 'invalid value for "gender", must be one of M, F'
      end
      if @api_client.config.client_side_validation && opts[:'age_group'] && !['0_19', '20_24', '25_34', '35_44', '45_54', '55_64', '65_69', '70_74', '75_plus'].include?(opts[:'age_group'])
        fail ArgumentError, 'invalid value for "age_group", must be one of 0_19, 20_24, 25_34, 35_44, 45_54, 55_64, 65_69, 70_74, 75_plus'
      end
      if @api_client.config.client_side_validation && opts[:'weight_class'] && !['0_124', '125_149', '150_164', '165_179', '180_199', '200_224', '225_249', '250_plus', '0_54', '55_64', '65_74', '75_84', '85_94', '95_104', '105_114', '115_plus'].include?(opts[:'weight_class'])
        fail ArgumentError, 'invalid value for "weight_class", must be one of 0_124, 125_149, 150_164, 165_179, 180_199, 200_224, 225_249, 250_plus, 0_54, 55_64, 65_74, 75_84, 85_94, 95_104, 105_114, 115_plus'
      end
      if @api_client.config.client_side_validation && opts[:'date_range'] && !['this_year', 'this_month', 'this_week', 'today'].include?(opts[:'date_range'])
        fail ArgumentError, 'invalid value for "date_range", must be one of this_year, this_month, this_week, today'
      end
      # resource path
      local_var_path = "/segments/{id}/leaderboard".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'gender'] = opts[:'gender'] if !opts[:'gender'].nil?
      query_params[:'age_group'] = opts[:'age_group'] if !opts[:'age_group'].nil?
      query_params[:'weight_class'] = opts[:'weight_class'] if !opts[:'weight_class'].nil?
      query_params[:'following'] = opts[:'following'] if !opts[:'following'].nil?
      query_params[:'club_id'] = opts[:'club_id'] if !opts[:'club_id'].nil?
      query_params[:'date_range'] = opts[:'date_range'] if !opts[:'date_range'].nil?
      query_params[:'context_entries'] = opts[:'context_entries'] if !opts[:'context_entries'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SegmentLeaderboard')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#get_leaderboard_by_segment_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Starred Segments
    # List of the authenticated athlete's starred segments.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [Array<SummarySegment>]
    def get_logged_in_athlete_starred_segments(opts = {})
      data, _status_code, _headers = get_logged_in_athlete_starred_segments_with_http_info(opts)
      return data
    end

    # List Starred Segments
    # List of the authenticated athlete&#39;s starred segments.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(Array<SummarySegment>, Fixnum, Hash)>] Array<SummarySegment> data, response status code and response headers
    def get_logged_in_athlete_starred_segments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.get_logged_in_athlete_starred_segments ..."
      end
      # resource path
      local_var_path = "/segments/starred"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SummarySegment>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#get_logged_in_athlete_starred_segments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Segment
    # Returns the specified segment.
    # @param id The identifier of the segment.
    # @param [Hash] opts the optional parameters
    # @return [DetailedSegment]
    def get_segment_by_id(id, opts = {})
      data, _status_code, _headers = get_segment_by_id_with_http_info(id, opts)
      return data
    end

    # Get Segment
    # Returns the specified segment.
    # @param id The identifier of the segment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetailedSegment, Fixnum, Hash)>] DetailedSegment data, response status code and response headers
    def get_segment_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.get_segment_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SegmentsApi.get_segment_by_id"
      end
      # resource path
      local_var_path = "/segments/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetailedSegment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#get_segment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Star Segment
    # Stars the given segment for the authenticated athlete.
    # @param id The identifier of the segment to star.
    # @param [Hash] opts the optional parameters
    # @return [DetailedSegment]
    def star_segment(id, opts = {})
      data, _status_code, _headers = star_segment_with_http_info(id, opts)
      return data
    end

    # Star Segment
    # Stars the given segment for the authenticated athlete.
    # @param id The identifier of the segment to star.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetailedSegment, Fixnum, Hash)>] DetailedSegment data, response status code and response headers
    def star_segment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.star_segment ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SegmentsApi.star_segment"
      end
      # resource path
      local_var_path = "/segments/{id}/starred".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetailedSegment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#star_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
