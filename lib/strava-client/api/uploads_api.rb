=begin
#Strava API v3

#The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module StravaClient
  class UploadsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Upload Activity
    # Uploads a new data file to create an activity from. Requires activity:write scope.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The uploaded file.
    # @option opts [String] :name The desired name of the resulting activity.
    # @option opts [String] :description The desired description of the resulting activity.
    # @option opts [String] :trainer Whether the resulting activity should be marked as having been performed on a trainer.
    # @option opts [String] :commute Whether the resulting activity should be tagged as a commute.
    # @option opts [String] :data_type The format of the uploaded file.
    # @option opts [String] :external_id The desired external identifier of the resulting activity.
    # @return [Upload]
    def create_upload(opts = {})
      data, _status_code, _headers = create_upload_with_http_info(opts)
      return data
    end

    # Upload Activity
    # Uploads a new data file to create an activity from. Requires activity:write scope.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The uploaded file.
    # @option opts [String] :name The desired name of the resulting activity.
    # @option opts [String] :description The desired description of the resulting activity.
    # @option opts [String] :trainer Whether the resulting activity should be marked as having been performed on a trainer.
    # @option opts [String] :commute Whether the resulting activity should be tagged as a commute.
    # @option opts [String] :data_type The format of the uploaded file.
    # @option opts [String] :external_id The desired external identifier of the resulting activity.
    # @return [Array<(Upload, Fixnum, Hash)>] Upload data, response status code and response headers
    def create_upload_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UploadsApi.create_upload ..."
      end
      if @api_client.config.client_side_validation && opts[:'data_type'] && !['fit', 'fit.gz', 'tcx', 'tcx.gz', 'gpx', 'gpx.gz'].include?(opts[:'data_type'])
        fail ArgumentError, 'invalid value for "data_type", must be one of fit, fit.gz, tcx, tcx.gz, gpx, gpx.gz'
      end
      # resource path
      local_var_path = "/uploads"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["file"] = opts[:'file'] if !opts[:'file'].nil?
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["trainer"] = opts[:'trainer'] if !opts[:'trainer'].nil?
      form_params["commute"] = opts[:'commute'] if !opts[:'commute'].nil?
      form_params["data_type"] = opts[:'data_type'] if !opts[:'data_type'].nil?
      form_params["external_id"] = opts[:'external_id'] if !opts[:'external_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Upload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UploadsApi#create_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Upload
    # Returns an upload for a given identifier. Requires activity:write scope.
    # @param upload_id The identifier of the upload.
    # @param [Hash] opts the optional parameters
    # @return [Upload]
    def get_upload_by_id(upload_id, opts = {})
      data, _status_code, _headers = get_upload_by_id_with_http_info(upload_id, opts)
      return data
    end

    # Get Upload
    # Returns an upload for a given identifier. Requires activity:write scope.
    # @param upload_id The identifier of the upload.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Upload, Fixnum, Hash)>] Upload data, response status code and response headers
    def get_upload_by_id_with_http_info(upload_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UploadsApi.get_upload_by_id ..."
      end
      # verify the required parameter 'upload_id' is set
      if @api_client.config.client_side_validation && upload_id.nil?
        fail ArgumentError, "Missing the required parameter 'upload_id' when calling UploadsApi.get_upload_by_id"
      end
      # resource path
      local_var_path = "/uploads/{uploadId}".sub('{' + 'uploadId' + '}', upload_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Upload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UploadsApi#get_upload_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
