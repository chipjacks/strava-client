=begin
#Strava API v3

#Strava API

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module StravaClient
  class AthletesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Authenticated Athlete
    # Returns the currently authenticated athlete.
    # @param [Hash] opts the optional parameters
    # @return [DetailedAthlete]
    def get_logged_in_athlete(opts = {})
      data, _status_code, _headers = get_logged_in_athlete_with_http_info(opts)
      return data
    end

    # Get Authenticated Athlete
    # Returns the currently authenticated athlete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetailedAthlete, Fixnum, Hash)>] DetailedAthlete data, response status code and response headers
    def get_logged_in_athlete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AthletesApi.get_logged_in_athlete ..."
      end
      # resource path
      local_var_path = "/athlete"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetailedAthlete')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AthletesApi#get_logged_in_athlete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Zones
    # Returns the the authenticated athlete's heart rate and power zones.
    # @param [Hash] opts the optional parameters
    # @return [Zones]
    def get_logged_in_athlete_zones(opts = {})
      data, _status_code, _headers = get_logged_in_athlete_zones_with_http_info(opts)
      return data
    end

    # Get Zones
    # Returns the the authenticated athlete&#39;s heart rate and power zones.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Zones, Fixnum, Hash)>] Zones data, response status code and response headers
    def get_logged_in_athlete_zones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AthletesApi.get_logged_in_athlete_zones ..."
      end
      # resource path
      local_var_path = "/athlete/zones"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Zones')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AthletesApi#get_logged_in_athlete_zones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Athlete Stats
    # Returns the activity stats of an athlete.
    # @param id The identifier of the athlete.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [ActivityStats]
    def get_stats(id, opts = {})
      data, _status_code, _headers = get_stats_with_http_info(id, opts)
      return data
    end

    # Get Athlete Stats
    # Returns the activity stats of an athlete.
    # @param id The identifier of the athlete.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(ActivityStats, Fixnum, Hash)>] ActivityStats data, response status code and response headers
    def get_stats_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AthletesApi.get_stats ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AthletesApi.get_stats"
      end
      # resource path
      local_var_path = "/athletes/{id}/stats".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ActivityStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AthletesApi#get_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Athlete
    # Update the currently authenticated athlete.
    # @param body The athlete entity to update.
    # @param [Hash] opts the optional parameters
    # @return [DetailedAthlete]
    def update_logged_in_athlete(body, opts = {})
      data, _status_code, _headers = update_logged_in_athlete_with_http_info(body, opts)
      return data
    end

    # Update Athlete
    # Update the currently authenticated athlete.
    # @param body The athlete entity to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetailedAthlete, Fixnum, Hash)>] DetailedAthlete data, response status code and response headers
    def update_logged_in_athlete_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AthletesApi.update_logged_in_athlete ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AthletesApi.update_logged_in_athlete"
      end
      # resource path
      local_var_path = "/athlete"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetailedAthlete')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AthletesApi#update_logged_in_athlete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
