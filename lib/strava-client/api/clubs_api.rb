=begin
#Strava API v3

#Strava API

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module StravaClient
  class ClubsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List Club Activities
    # Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Enhanced Privacy Mode is respected for all activities.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [Array<SummaryActivity>]
    def get_club_activities_by_id(id, opts = {})
      data, _status_code, _headers = get_club_activities_by_id_with_http_info(id, opts)
      return data
    end

    # List Club Activities
    # Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Enhanced Privacy Mode is respected for all activities.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(Array<SummaryActivity>, Fixnum, Hash)>] Array<SummaryActivity> data, response status code and response headers
    def get_club_activities_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClubsApi.get_club_activities_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClubsApi.get_club_activities_by_id"
      end
      # resource path
      local_var_path = "/clubs/{id}/activities".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SummaryActivity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubsApi#get_club_activities_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Club Administrators.
    # Returns a list of the administrators of a given club.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [Array<SummaryAthlete>]
    def get_club_admins_by_id(id, opts = {})
      data, _status_code, _headers = get_club_admins_by_id_with_http_info(id, opts)
      return data
    end

    # List Club Administrators.
    # Returns a list of the administrators of a given club.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(Array<SummaryAthlete>, Fixnum, Hash)>] Array<SummaryAthlete> data, response status code and response headers
    def get_club_admins_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClubsApi.get_club_admins_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClubsApi.get_club_admins_by_id"
      end
      # resource path
      local_var_path = "/clubs/{id}/admins".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SummaryAthlete>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubsApi#get_club_admins_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Club
    # Returns a given club using its identifier.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @return [DetailedClub]
    def get_club_by_id(id, opts = {})
      data, _status_code, _headers = get_club_by_id_with_http_info(id, opts)
      return data
    end

    # Get Club
    # Returns a given club using its identifier.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetailedClub, Fixnum, Hash)>] DetailedClub data, response status code and response headers
    def get_club_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClubsApi.get_club_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClubsApi.get_club_by_id"
      end
      # resource path
      local_var_path = "/clubs/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetailedClub')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubsApi#get_club_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Club Members
    # Returns a list of the athletes who are members of a given club.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [Array<SummaryAthlete>]
    def get_club_members_by_id(id, opts = {})
      data, _status_code, _headers = get_club_members_by_id_with_http_info(id, opts)
      return data
    end

    # List Club Members
    # Returns a list of the athletes who are members of a given club.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(Array<SummaryAthlete>, Fixnum, Hash)>] Array<SummaryAthlete> data, response status code and response headers
    def get_club_members_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClubsApi.get_club_members_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClubsApi.get_club_members_by_id"
      end
      # resource path
      local_var_path = "/clubs/{id}/members".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SummaryAthlete>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubsApi#get_club_members_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Athlete Clubs
    # Returns a list of the clubs whose membership includes the authenticated athlete.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [Array<SummaryClub>]
    def get_logged_in_athlete_clubs(opts = {})
      data, _status_code, _headers = get_logged_in_athlete_clubs_with_http_info(opts)
      return data
    end

    # List Athlete Clubs
    # Returns a list of the clubs whose membership includes the authenticated athlete.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(Array<SummaryClub>, Fixnum, Hash)>] Array<SummaryClub> data, response status code and response headers
    def get_logged_in_athlete_clubs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClubsApi.get_logged_in_athlete_clubs ..."
      end
      # resource path
      local_var_path = "/athlete/clubs"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SummaryClub>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubsApi#get_logged_in_athlete_clubs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Join Club
    # Adds the authenticated athlete to the club's membership.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @return [MembershipApplication]
    def join_club_by_id(id, opts = {})
      data, _status_code, _headers = join_club_by_id_with_http_info(id, opts)
      return data
    end

    # Join Club
    # Adds the authenticated athlete to the club&#39;s membership.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembershipApplication, Fixnum, Hash)>] MembershipApplication data, response status code and response headers
    def join_club_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClubsApi.join_club_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClubsApi.join_club_by_id"
      end
      # resource path
      local_var_path = "/clubs/{id}/join".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MembershipApplication')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubsApi#join_club_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Leave Club
    # Removes the authenticated athlete from the club's membership.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @return [MembershipApplication]
    def leave_club_by_id(id, opts = {})
      data, _status_code, _headers = leave_club_by_id_with_http_info(id, opts)
      return data
    end

    # Leave Club
    # Removes the authenticated athlete from the club&#39;s membership.
    # @param id The identifier of the club.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembershipApplication, Fixnum, Hash)>] MembershipApplication data, response status code and response headers
    def leave_club_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClubsApi.leave_club_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClubsApi.leave_club_by_id"
      end
      # resource path
      local_var_path = "/clubs/{id}/leave".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MembershipApplication')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClubsApi#leave_club_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
