=begin
#Strava API v3

#Strava API

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module StravaClient
  class StreamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Activity Streams
    # Returns the given activity's streams.
    # @param id The identifier of the activity.
    # @param keys Desired stream types.
    # @param key_by_type Must be true.
    # @param [Hash] opts the optional parameters
    # @return [StreamSet]
    def get_activity_streams(id, keys, key_by_type, opts = {})
      data, _status_code, _headers = get_activity_streams_with_http_info(id, keys, key_by_type, opts)
      return data
    end

    # Get Activity Streams
    # Returns the given activity&#39;s streams.
    # @param id The identifier of the activity.
    # @param keys Desired stream types.
    # @param key_by_type Must be true.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StreamSet, Fixnum, Hash)>] StreamSet data, response status code and response headers
    def get_activity_streams_with_http_info(id, keys, key_by_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StreamsApi.get_activity_streams ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StreamsApi.get_activity_streams"
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling StreamsApi.get_activity_streams"
      end
      if @api_client.config.client_side_validation && keys.length < 1
        fail ArgumentError, 'invalid value for "keys" when calling StreamsApi.get_activity_streams, number of items must be greater than or equal to 1.'
      end

      # verify the required parameter 'key_by_type' is set
      if @api_client.config.client_side_validation && key_by_type.nil?
        fail ArgumentError, "Missing the required parameter 'key_by_type' when calling StreamsApi.get_activity_streams"
      end
      # resource path
      local_var_path = "/activities/{id}/streams".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'keys'] = @api_client.build_collection_param(keys, :csv)
      query_params[:'key_by_type'] = key_by_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StreamSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#get_activity_streams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get segment effort streams
    # Returns a set of streams for a segment effort completed by the authenticated athlete.
    # @param id The identifier of the segment effort.
    # @param keys The types of streams to return.
    # @param key_by_type Must be true.
    # @param [Hash] opts the optional parameters
    # @return [StreamSet]
    def get_segment_effort_streams(id, keys, key_by_type, opts = {})
      data, _status_code, _headers = get_segment_effort_streams_with_http_info(id, keys, key_by_type, opts)
      return data
    end

    # Get segment effort streams
    # Returns a set of streams for a segment effort completed by the authenticated athlete.
    # @param id The identifier of the segment effort.
    # @param keys The types of streams to return.
    # @param key_by_type Must be true.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StreamSet, Fixnum, Hash)>] StreamSet data, response status code and response headers
    def get_segment_effort_streams_with_http_info(id, keys, key_by_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StreamsApi.get_segment_effort_streams ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StreamsApi.get_segment_effort_streams"
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling StreamsApi.get_segment_effort_streams"
      end
      if @api_client.config.client_side_validation && keys.length < 1
        fail ArgumentError, 'invalid value for "keys" when calling StreamsApi.get_segment_effort_streams, number of items must be greater than or equal to 1.'
      end

      # verify the required parameter 'key_by_type' is set
      if @api_client.config.client_side_validation && key_by_type.nil?
        fail ArgumentError, "Missing the required parameter 'key_by_type' when calling StreamsApi.get_segment_effort_streams"
      end
      # resource path
      local_var_path = "/segment_efforts/{id}/streams".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'keys'] = @api_client.build_collection_param(keys, :csv)
      query_params[:'key_by_type'] = key_by_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StreamSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#get_segment_effort_streams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Segment Streams
    # Returns the given segment's streams.
    # @param id The identifier of the segment.
    # @param keys The types of streams to return.
    # @param key_by_type Must be true.
    # @param [Hash] opts the optional parameters
    # @return [StreamSet]
    def get_segment_streams(id, keys, key_by_type, opts = {})
      data, _status_code, _headers = get_segment_streams_with_http_info(id, keys, key_by_type, opts)
      return data
    end

    # Get Segment Streams
    # Returns the given segment&#39;s streams.
    # @param id The identifier of the segment.
    # @param keys The types of streams to return.
    # @param key_by_type Must be true.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StreamSet, Fixnum, Hash)>] StreamSet data, response status code and response headers
    def get_segment_streams_with_http_info(id, keys, key_by_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StreamsApi.get_segment_streams ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StreamsApi.get_segment_streams"
      end
      # verify the required parameter 'keys' is set
      if @api_client.config.client_side_validation && keys.nil?
        fail ArgumentError, "Missing the required parameter 'keys' when calling StreamsApi.get_segment_streams"
      end
      if @api_client.config.client_side_validation && keys.length < 1
        fail ArgumentError, 'invalid value for "keys" when calling StreamsApi.get_segment_streams, number of items must be greater than or equal to 1.'
      end

      # verify the required parameter 'key_by_type' is set
      if @api_client.config.client_side_validation && key_by_type.nil?
        fail ArgumentError, "Missing the required parameter 'key_by_type' when calling StreamsApi.get_segment_streams"
      end
      # resource path
      local_var_path = "/segments/{id}/streams".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'keys'] = @api_client.build_collection_param(keys, :csv)
      query_params[:'key_by_type'] = key_by_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StreamSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#get_segment_streams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
