=begin
#Strava API v3

#Strava API

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module StravaClient
  class ActivitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create an Activity
    # Creates a manual activity for an athlete. Requires write permissions, as requested during the authorization process.
    # @param name The name of the activity.
    # @param type Type of activity. For example - Run, Ride etc.
    # @param start_date_local ISO 8601 formatted date time.
    # @param elapsed_time In seconds.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of the activity.
    # @option opts [String] :distance In meters.
    # @option opts [Integer] :private set to 1 to mark the resulting activity as private, ‘view_private’ permissions will be necessary to view the activity. If not specified, set according to the athlete’s privacy setting (recommended).
    # @option opts [Integer] :trainer Set to 1 to mark as a trainer activity.
    # @option opts [String] :photo_ids List of native photo ids to attach to the activity.
    # @option opts [Integer] :commute Set to 1 to mark as commute.
    # @return [DetailedActivity]
    def create_activity(name, type, start_date_local, elapsed_time, opts = {})
      data, _status_code, _headers = create_activity_with_http_info(name, type, start_date_local, elapsed_time, opts)
      return data
    end

    # Create an Activity
    # Creates a manual activity for an athlete. Requires write permissions, as requested during the authorization process.
    # @param name The name of the activity.
    # @param type Type of activity. For example - Run, Ride etc.
    # @param start_date_local ISO 8601 formatted date time.
    # @param elapsed_time In seconds.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of the activity.
    # @option opts [String] :distance In meters.
    # @option opts [Integer] :private set to 1 to mark the resulting activity as private, ‘view_private’ permissions will be necessary to view the activity. If not specified, set according to the athlete’s privacy setting (recommended).
    # @option opts [Integer] :trainer Set to 1 to mark as a trainer activity.
    # @option opts [String] :photo_ids List of native photo ids to attach to the activity.
    # @option opts [Integer] :commute Set to 1 to mark as commute.
    # @return [Array<(DetailedActivity, Fixnum, Hash)>] DetailedActivity data, response status code and response headers
    def create_activity_with_http_info(name, type, start_date_local, elapsed_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.create_activity ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActivitiesApi.create_activity"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ActivitiesApi.create_activity"
      end
      # verify the required parameter 'start_date_local' is set
      if @api_client.config.client_side_validation && start_date_local.nil?
        fail ArgumentError, "Missing the required parameter 'start_date_local' when calling ActivitiesApi.create_activity"
      end
      # verify the required parameter 'elapsed_time' is set
      if @api_client.config.client_side_validation && elapsed_time.nil?
        fail ArgumentError, "Missing the required parameter 'elapsed_time' when calling ActivitiesApi.create_activity"
      end
      # resource path
      local_var_path = "/activities"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["type"] = type
      form_params["start_date_local"] = start_date_local
      form_params["elapsed_time"] = elapsed_time
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["distance"] = opts[:'distance'] if !opts[:'distance'].nil?
      form_params["private"] = opts[:'private'] if !opts[:'private'].nil?
      form_params["trainer"] = opts[:'trainer'] if !opts[:'trainer'].nil?
      form_params["photo_ids"] = opts[:'photo_ids'] if !opts[:'photo_ids'].nil?
      form_params["commute"] = opts[:'commute'] if !opts[:'commute'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetailedActivity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#create_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Activity
    # Returns the given activity that is owned by the authenticated athlete.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_all_efforts To include all segments efforts.
    # @return [DetailedActivity]
    def get_activity_by_id(id, opts = {})
      data, _status_code, _headers = get_activity_by_id_with_http_info(id, opts)
      return data
    end

    # Get Activity
    # Returns the given activity that is owned by the authenticated athlete.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_all_efforts To include all segments efforts.
    # @return [Array<(DetailedActivity, Fixnum, Hash)>] DetailedActivity data, response status code and response headers
    def get_activity_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.get_activity_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivitiesApi.get_activity_by_id"
      end
      # resource path
      local_var_path = "/activities".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include_all_efforts'] = opts[:'include_all_efforts'] if !opts[:'include_all_efforts'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetailedActivity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#get_activity_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Activity Comments
    # Returns the comments on the given activity.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [Array<Comment>]
    def get_comments_by_activity_id(id, opts = {})
      data, _status_code, _headers = get_comments_by_activity_id_with_http_info(id, opts)
      return data
    end

    # List Activity Comments
    # Returns the comments on the given activity.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(Array<Comment>, Fixnum, Hash)>] Array<Comment> data, response status code and response headers
    def get_comments_by_activity_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.get_comments_by_activity_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivitiesApi.get_comments_by_activity_id"
      end
      # resource path
      local_var_path = "/activities/{id}/comments".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Comment>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#get_comments_by_activity_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Activity Kudoers
    # Returns the athletes who kudoed an activity identified by an identifier.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [Array<SummaryAthlete>]
    def get_kudoers_by_activity_id(id, opts = {})
      data, _status_code, _headers = get_kudoers_by_activity_id_with_http_info(id, opts)
      return data
    end

    # List Activity Kudoers
    # Returns the athletes who kudoed an activity identified by an identifier.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(Array<SummaryAthlete>, Fixnum, Hash)>] Array<SummaryAthlete> data, response status code and response headers
    def get_kudoers_by_activity_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.get_kudoers_by_activity_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivitiesApi.get_kudoers_by_activity_id"
      end
      # resource path
      local_var_path = "/activities/{id}/kudos".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SummaryAthlete>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#get_kudoers_by_activity_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Activity Laps
    # Returns the laps of an activity identified by an identifier.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<Lap>]
    def get_laps_by_activity_id(id, opts = {})
      data, _status_code, _headers = get_laps_by_activity_id_with_http_info(id, opts)
      return data
    end

    # List Activity Laps
    # Returns the laps of an activity identified by an identifier.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Lap>, Fixnum, Hash)>] Array<Lap> data, response status code and response headers
    def get_laps_by_activity_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.get_laps_by_activity_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivitiesApi.get_laps_by_activity_id"
      end
      # resource path
      local_var_path = "/activities/{id}/laps".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Lap>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#get_laps_by_activity_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Athlete Activities
    # Returns the activities of an athlete for a specific identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :before An epoch timestamp to use for filtering activities that have taken place before a certain time.
    # @option opts [Integer] :after An epoch timestamp to use for filtering activities that have taken place after a certain time.
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30. (default to 30)
    # @return [Array<SummaryActivity>]
    def get_logged_in_athlete_activities(opts = {})
      data, _status_code, _headers = get_logged_in_athlete_activities_with_http_info(opts)
      return data
    end

    # List Athlete Activities
    # Returns the activities of an athlete for a specific identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :before An epoch timestamp to use for filtering activities that have taken place before a certain time.
    # @option opts [Integer] :after An epoch timestamp to use for filtering activities that have taken place after a certain time.
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of items per page. Defaults to 30.
    # @return [Array<(Array<SummaryActivity>, Fixnum, Hash)>] Array<SummaryActivity> data, response status code and response headers
    def get_logged_in_athlete_activities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.get_logged_in_athlete_activities ..."
      end
      # resource path
      local_var_path = "/athlete/activities"

      # query parameters
      query_params = {}
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SummaryActivity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#get_logged_in_athlete_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Activity Zones
    # Premium Feature. Returns the zones of a given activity.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<ActivityZone>]
    def get_zones_by_activity_id(id, opts = {})
      data, _status_code, _headers = get_zones_by_activity_id_with_http_info(id, opts)
      return data
    end

    # Get Activity Zones
    # Premium Feature. Returns the zones of a given activity.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ActivityZone>, Fixnum, Hash)>] Array<ActivityZone> data, response status code and response headers
    def get_zones_by_activity_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.get_zones_by_activity_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivitiesApi.get_zones_by_activity_id"
      end
      # resource path
      local_var_path = "/activities/{id}/zones".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ActivityZone>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#get_zones_by_activity_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Activity
    # Updates the given activity that is owned by the authenticated athlete.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdatableActivity] :body 
    # @return [DetailedActivity]
    def update_activity_by_id(id, opts = {})
      data, _status_code, _headers = update_activity_by_id_with_http_info(id, opts)
      return data
    end

    # Update Activity
    # Updates the given activity that is owned by the authenticated athlete.
    # @param id The identifier of the activity.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdatableActivity] :body 
    # @return [Array<(DetailedActivity, Fixnum, Hash)>] DetailedActivity data, response status code and response headers
    def update_activity_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ActivitiesApi.update_activity_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ActivitiesApi.update_activity_by_id"
      end
      # resource path
      local_var_path = "/activities".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['strava_oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetailedActivity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActivitiesApi#update_activity_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
